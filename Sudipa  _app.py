{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9774,"status":"ok","timestamp":1753164931624,"user":{"displayName":"Sudipa Chowdhury","userId":"15096515911104138809"},"user_tz":-330},"id":"bFVUNUicxMNA","outputId":"32fa4c64-2f62-4975-cc3e-263aac9046e5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting flask-ngrok\n","  Downloading flask_ngrok-0.0.25-py3-none-any.whl.metadata (1.8 kB)\n","Requirement already satisfied: Flask\u003e=0.8 in /usr/local/lib/python3.11/dist-packages (from flask-ngrok) (3.1.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from flask-ngrok) (2.32.3)\n","Requirement already satisfied: blinker\u003e=1.9.0 in /usr/local/lib/python3.11/dist-packages (from Flask\u003e=0.8-\u003eflask-ngrok) (1.9.0)\n","Requirement already satisfied: click\u003e=8.1.3 in /usr/local/lib/python3.11/dist-packages (from Flask\u003e=0.8-\u003eflask-ngrok) (8.2.1)\n","Requirement already satisfied: itsdangerous\u003e=2.2.0 in /usr/local/lib/python3.11/dist-packages (from Flask\u003e=0.8-\u003eflask-ngrok) (2.2.0)\n","Requirement already satisfied: jinja2\u003e=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask\u003e=0.8-\u003eflask-ngrok) (3.1.6)\n","Requirement already satisfied: markupsafe\u003e=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Flask\u003e=0.8-\u003eflask-ngrok) (3.0.2)\n","Requirement already satisfied: werkzeug\u003e=3.1.0 in /usr/local/lib/python3.11/dist-packages (from Flask\u003e=0.8-\u003eflask-ngrok) (3.1.3)\n","Requirement already satisfied: charset-normalizer\u003c4,\u003e=2 in /usr/local/lib/python3.11/dist-packages (from requests-\u003eflask-ngrok) (3.4.2)\n","Requirement already satisfied: idna\u003c4,\u003e=2.5 in /usr/local/lib/python3.11/dist-packages (from requests-\u003eflask-ngrok) (3.10)\n","Requirement already satisfied: urllib3\u003c3,\u003e=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests-\u003eflask-ngrok) (2.4.0)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests-\u003eflask-ngrok) (2025.7.14)\n","Downloading flask_ngrok-0.0.25-py3-none-any.whl (3.1 kB)\n","Installing collected packages: flask-ngrok\n","Successfully installed flask-ngrok-0.0.25\n"]}],"source":["!pip install flask-ngrok"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"elapsed":12286,"status":"ok","timestamp":1753165640671,"user":{"displayName":"Sudipa Chowdhury","userId":"15096515911104138809"},"user_tz":-330},"id":"uHg9DeAwxcvg","outputId":"819928f2-3132-452c-c372-1b9f2438840c"},"outputs":[{"data":{"text/html":["\n","     \u003cinput type=\"file\" id=\"files-da02daed-ccc5-4bb6-a931-05140c70d88d\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" /\u003e\n","     \u003coutput id=\"result-da02daed-ccc5-4bb6-a931-05140c70d88d\"\u003e\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      \u003c/output\u003e\n","      \u003cscript\u003e// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) =\u003e {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable\u003c!Object\u003e} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) =\u003e {\n","    inputElement.addEventListener('change', (e) =\u003e {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) =\u003e {\n","    cancel.onclick = () =\u003e {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) =\u003e {\n","      const reader = new FileReader();\n","      reader.onload = (e) =\u003e {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position \u003c fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","\u003c/script\u003e "],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Saving model.pkl to model (1).pkl\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"ECp8mhJzxlTP"},"outputs":[{"name":"stdout","output_type":"stream","text":[" * Serving Flask app '__main__'\n"," * Debug mode: off\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/sklearn/base.py:380: InconsistentVersionWarning: Trying to unpickle estimator DecisionTreeClassifier from version 1.7.1 when using version 1.6.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:\n","https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/base.py:380: InconsistentVersionWarning: Trying to unpickle estimator RandomForestClassifier from version 1.7.1 when using version 1.6.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:\n","https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations\n","  warnings.warn(\n","INFO:werkzeug:\u001b[31m\u001b[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\u001b[0m\n"," * Running on http://127.0.0.1:5000\n","INFO:werkzeug:\u001b[33mPress CTRL+C to quit\u001b[0m\n","Exception in thread Thread-9:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connection.py\", line 198, in _new_conn\n","    sock = connection.create_connection(\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/util/connection.py\", line 85, in create_connection\n","    raise err\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/util/connection.py\", line 73, in create_connection\n","    sock.connect(sa)\n","ConnectionRefusedError: [Errno 111] Connection refused\n","\n","The above exception was the direct cause of the following exception:\n","\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connectionpool.py\", line 787, in urlopen\n","    response = self._make_request(\n","               ^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connectionpool.py\", line 493, in _make_request\n","    conn.request(\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connection.py\", line 445, in request\n","    self.endheaders()\n","  File \"/usr/lib/python3.11/http/client.py\", line 1298, in endheaders\n","    self._send_output(message_body, encode_chunked=encode_chunked)\n","  File \"/usr/lib/python3.11/http/client.py\", line 1058, in _send_output\n","    self.send(msg)\n","  File \"/usr/lib/python3.11/http/client.py\", line 996, in send\n","    self.connect()\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connection.py\", line 276, in connect\n","    self.sock = self._new_conn()\n","                ^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connection.py\", line 213, in _new_conn\n","    raise NewConnectionError(\n","urllib3.exceptions.NewConnectionError: \u003curllib3.connection.HTTPConnection object at 0x7cc760f0db50\u003e: Failed to establish a new connection: [Errno 111] Connection refused\n","\n","The above exception was the direct cause of the following exception:\n","\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.11/dist-packages/requests/adapters.py\", line 667, in send\n","    resp = conn.urlopen(\n","           ^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/connectionpool.py\", line 841, in urlopen\n","    retries = retries.increment(\n","              ^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/urllib3/util/retry.py\", line 519, in increment\n","    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n","    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4040): Max retries exceeded with url: /api/tunnels (Caused by NewConnectionError('\u003curllib3.connection.HTTPConnection object at 0x7cc760f0db50\u003e: Failed to establish a new connection: [Errno 111] Connection refused'))\n","\n","During handling of the above exception, another exception occurred:\n","\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.11/threading.py\", line 1045, in _bootstrap_inner\n","    self.run()\n","  File \"/usr/lib/python3.11/threading.py\", line 1401, in run\n","    self.function(*self.args, **self.kwargs)\n","  File \"/usr/local/lib/python3.11/dist-packages/flask_ngrok.py\", line 70, in start_ngrok\n","    ngrok_address = _run_ngrok()\n","                    ^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/flask_ngrok.py\", line 35, in _run_ngrok\n","    tunnel_url = requests.get(localhost_url).text  # Get the tunnel information\n","                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/requests/api.py\", line 73, in get\n","    return request(\"get\", url, params=params, **kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/requests/api.py\", line 59, in request\n","    return session.request(method=method, url=url, **kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/requests/sessions.py\", line 589, in request\n","    resp = self.send(prep, **send_kwargs)\n","           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/requests/sessions.py\", line 703, in send\n","    r = adapter.send(request, **kwargs)\n","        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","  File \"/usr/local/lib/python3.11/dist-packages/requests/adapters.py\", line 700, in send\n","    raise ConnectionError(e, request=request)\n","requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=4040): Max retries exceeded with url: /api/tunnels (Caused by NewConnectionError('\u003curllib3.connection.HTTPConnection object at 0x7cc760f0db50\u003e: Failed to establish a new connection: [Errno 111] Connection refused'))\n"]}],"source":["from flask import Flask, request, render_template_string\n","from flask_ngrok import run_with_ngrok\n","import joblib\n","import numpy as np\n","\n","# Load the model\n","model = joblib.load(\"model.pkl\")\n","# HTML Template (direct string use in Colab)\n","html_template = '''\n","\u003c!DOCTYPE html\u003e\n","\u003chtml\u003e\n","\u003chead\u003e\n","    \u003ctitle\u003eHeart Disease Prediction\u003c/title\u003e\n","\u003c/head\u003e\n","\u003cbody\u003e\n","    \u003ch2\u003eEnter Patient Details\u003c/h2\u003e\n","    \u003cform action=\"/predict\" method=\"post\"\u003e\n","        Age: \u003cinput type=\"number\" name=\"age\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Sex (1=Male, 0=Female): \u003cinput type=\"number\" name=\"sex\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Chest Pain Type (0-3): \u003cinput type=\"number\" name=\"cp\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Resting BP: \u003cinput type=\"number\" name=\"trestbps\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Cholesterol: \u003cinput type=\"number\" name=\"chol\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Fasting Blood Sugar \u003e 120 (1=True, 0=False): \u003cinput type=\"number\" name=\"fbs\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Rest ECG (0-2): \u003cinput type=\"number\" name=\"restecg\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Max Heart Rate: \u003cinput type=\"number\" name=\"thalach\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Exercise Induced Angina (1=Yes, 0=No): \u003cinput type=\"number\" name=\"exang\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Oldpeak: \u003cinput type=\"number\" name=\"oldpeak\" step=\"any\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Slope (0-2): \u003cinput type=\"number\" name=\"slope\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        CA (0-4): \u003cinput type=\"number\" name=\"ca\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        Thal (1=Normal, 2=Fixed Defect, 3=Reversible): \u003cinput type=\"number\" name=\"thal\" required\u003e\u003cbr\u003e\u003cbr\u003e\n","        \u003cinput type=\"submit\" value=\"Predict\"\u003e\n","    \u003c/form\u003e\n","\u003c/body\u003e\n","\u003c/html\u003e\n","'''\n","\n","app = Flask(__name__)\n","run_with_ngrok(app)\n","\n","@app.route('/')\n","def home():\n","    return render_template_string(html_template)\n","\n","@app.route('/predict', methods=['POST'])\n","def predict():\n","    features = [float(request.form.get(f)) for f in [\n","        'age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg',\n","        'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal'\n","    ]]\n","    prediction = model.predict([features])[0]\n","    result = \"Heart Disease Detected\" if prediction == 1 else \"No Heart Disease\"\n","    return f\"\u003ch2\u003ePrediction Result: {result}\u003c/h2\u003e\u003cbr\u003e\u003ca href='/'\u003eGo Back\u003c/a\u003e\"\n","\n","if __name__ == '__main__':\n","    app.run()\n","\n"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOdu92AxrmUQDGhCmxtuvUK","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}